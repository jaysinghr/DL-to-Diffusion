# Autogenerated by nbdev

d = { 'settings': { 'branch': 'develop',
                'doc_baseurl': '/DL-to-Diffusion',
                'doc_host': 'https://Jay.github.io',
                'git_url': 'https://github.com/Jay/DL-to-Diffusion',
                'lib_path': 'minimalai'},
  'syms': { 'minimalai.accel': { 'minimalai.accel.AccelerateCB': ('ddpm_v2.html#acceleratecb', 'minimalai/accel.py'),
                                 'minimalai.accel.AccelerateCB.__init__': ('ddpm_v2.html#acceleratecb.__init__', 'minimalai/accel.py'),
                                 'minimalai.accel.AccelerateCB.backward': ('ddpm_v2.html#acceleratecb.backward', 'minimalai/accel.py'),
                                 'minimalai.accel.AccelerateCB.before_fit': ('ddpm_v2.html#acceleratecb.before_fit', 'minimalai/accel.py'),
                                 'minimalai.accel.MixedPrecision': ('ddpm_v2.html#mixedprecision', 'minimalai/accel.py'),
                                 'minimalai.accel.MixedPrecision.after_loss': ( 'ddpm_v2.html#mixedprecision.after_loss',
                                                                                'minimalai/accel.py'),
                                 'minimalai.accel.MixedPrecision.backward': ('ddpm_v2.html#mixedprecision.backward', 'minimalai/accel.py'),
                                 'minimalai.accel.MixedPrecision.before_batch': ( 'ddpm_v2.html#mixedprecision.before_batch',
                                                                                  'minimalai/accel.py'),
                                 'minimalai.accel.MixedPrecision.before_fit': ( 'ddpm_v2.html#mixedprecision.before_fit',
                                                                                'minimalai/accel.py'),
                                 'minimalai.accel.MixedPrecision.step': ('ddpm_v2.html#mixedprecision.step', 'minimalai/accel.py')},
            'minimalai.activations': { 'minimalai.activations.ActivationStats': ( 'activations.html#activationstats',
                                                                                  'minimalai/activations.py'),
                                       'minimalai.activations.ActivationStats.__init__': ( 'activations.html#activationstats.__init__',
                                                                                           'minimalai/activations.py'),
                                       'minimalai.activations.ActivationStats.color_dim': ( 'activations.html#activationstats.color_dim',
                                                                                            'minimalai/activations.py'),
                                       'minimalai.activations.ActivationStats.dead_chart': ( 'activations.html#activationstats.dead_chart',
                                                                                             'minimalai/activations.py'),
                                       'minimalai.activations.ActivationStats.plot_stats': ( 'activations.html#activationstats.plot_stats',
                                                                                             'minimalai/activations.py'),
                                       'minimalai.activations.Hook': ('activations.html#hook', 'minimalai/activations.py'),
                                       'minimalai.activations.Hook.__del__': ('activations.html#hook.__del__', 'minimalai/activations.py'),
                                       'minimalai.activations.Hook.__init__': ( 'activations.html#hook.__init__',
                                                                                'minimalai/activations.py'),
                                       'minimalai.activations.Hook.remove': ('activations.html#hook.remove', 'minimalai/activations.py'),
                                       'minimalai.activations.Hooks': ('activations.html#hooks', 'minimalai/activations.py'),
                                       'minimalai.activations.Hooks.__del__': ( 'activations.html#hooks.__del__',
                                                                                'minimalai/activations.py'),
                                       'minimalai.activations.Hooks.__delitem__': ( 'activations.html#hooks.__delitem__',
                                                                                    'minimalai/activations.py'),
                                       'minimalai.activations.Hooks.__enter__': ( 'activations.html#hooks.__enter__',
                                                                                  'minimalai/activations.py'),
                                       'minimalai.activations.Hooks.__exit__': ( 'activations.html#hooks.__exit__',
                                                                                 'minimalai/activations.py'),
                                       'minimalai.activations.Hooks.__init__': ( 'activations.html#hooks.__init__',
                                                                                 'minimalai/activations.py'),
                                       'minimalai.activations.Hooks.remove': ('activations.html#hooks.remove', 'minimalai/activations.py'),
                                       'minimalai.activations.HooksCallback': ( 'activations.html#hookscallback',
                                                                                'minimalai/activations.py'),
                                       'minimalai.activations.HooksCallback.__init__': ( 'activations.html#hookscallback.__init__',
                                                                                         'minimalai/activations.py'),
                                       'minimalai.activations.HooksCallback.__iter__': ( 'activations.html#hookscallback.__iter__',
                                                                                         'minimalai/activations.py'),
                                       'minimalai.activations.HooksCallback.__len__': ( 'activations.html#hookscallback.__len__',
                                                                                        'minimalai/activations.py'),
                                       'minimalai.activations.HooksCallback._hookfunc': ( 'activations.html#hookscallback._hookfunc',
                                                                                          'minimalai/activations.py'),
                                       'minimalai.activations.HooksCallback.after_fit': ( 'activations.html#hookscallback.after_fit',
                                                                                          'minimalai/activations.py'),
                                       'minimalai.activations.HooksCallback.before_fit': ( 'activations.html#hookscallback.before_fit',
                                                                                           'minimalai/activations.py'),
                                       'minimalai.activations.append_stats': ('activations.html#append_stats', 'minimalai/activations.py'),
                                       'minimalai.activations.get_hist': ('activations.html#get_hist', 'minimalai/activations.py'),
                                       'minimalai.activations.get_min': ('activations.html#get_min', 'minimalai/activations.py'),
                                       'minimalai.activations.set_seed': ('activations.html#set_seed', 'minimalai/activations.py')},
            'minimalai.augment': { 'minimalai.augment.CapturePreds': ('augment.html#capturepreds', 'minimalai/augment.py'),
                                   'minimalai.augment.CapturePreds.after_batch': ( 'augment.html#capturepreds.after_batch',
                                                                                   'minimalai/augment.py'),
                                   'minimalai.augment.CapturePreds.after_fit': ( 'augment.html#capturepreds.after_fit',
                                                                                 'minimalai/augment.py'),
                                   'minimalai.augment.CapturePreds.before_fit': ( 'augment.html#capturepreds.before_fit',
                                                                                  'minimalai/augment.py'),
                                   'minimalai.augment.RandCopy': ('augment.html#randcopy', 'minimalai/augment.py'),
                                   'minimalai.augment.RandCopy.__init__': ('augment.html#randcopy.__init__', 'minimalai/augment.py'),
                                   'minimalai.augment.RandCopy.forward': ('augment.html#randcopy.forward', 'minimalai/augment.py'),
                                   'minimalai.augment.RandErase': ('augment.html#randerase', 'minimalai/augment.py'),
                                   'minimalai.augment.RandErase.__init__': ('augment.html#randerase.__init__', 'minimalai/augment.py'),
                                   'minimalai.augment.RandErase.forward': ('augment.html#randerase.forward', 'minimalai/augment.py'),
                                   'minimalai.augment._flops': ('augment.html#_flops', 'minimalai/augment.py'),
                                   'minimalai.augment._rand_copy1': ('augment.html#_rand_copy1', 'minimalai/augment.py'),
                                   'minimalai.augment._rand_erase1': ('augment.html#_rand_erase1', 'minimalai/augment.py'),
                                   'minimalai.augment.capture_preds': ('augment.html#capture_preds', 'minimalai/augment.py'),
                                   'minimalai.augment.rand_copy': ('augment.html#rand_copy', 'minimalai/augment.py'),
                                   'minimalai.augment.rand_erase': ('augment.html#rand_erase', 'minimalai/augment.py'),
                                   'minimalai.augment.show_image_batch': ('augment.html#show_image_batch', 'minimalai/augment.py'),
                                   'minimalai.augment.summary': ('augment.html#summary', 'minimalai/augment.py')},
            'minimalai.conv': { 'minimalai.conv.collate_device': ('convolutions.html#collate_device', 'minimalai/conv.py'),
                                'minimalai.conv.conv': ('convolutions.html#conv', 'minimalai/conv.py'),
                                'minimalai.conv.to_device': ('convolutions.html#to_device', 'minimalai/conv.py')},
            'minimalai.datasets': { 'minimalai.datasets.DataLoaders': ( 'minimalai-dataset-visualization.html#dataloaders',
                                                                        'minimalai/datasets.py'),
                                    'minimalai.datasets.DataLoaders.__init__': ( 'minimalai-dataset-visualization.html#dataloaders.__init__',
                                                                                 'minimalai/datasets.py'),
                                    'minimalai.datasets.DataLoaders.from_dataset_dict': ( 'minimalai-dataset-visualization.html#dataloaders.from_dataset_dict',
                                                                                          'minimalai/datasets.py'),
                                    'minimalai.datasets.apply_inplace_transformation': ( 'minimalai-dataset-visualization.html#apply_inplace_transformation',
                                                                                         'minimalai/datasets.py'),
                                    'minimalai.datasets.collate_dict': ( 'minimalai-dataset-visualization.html#collate_dict',
                                                                         'minimalai/datasets.py'),
                                    'minimalai.datasets.get_grid': ( 'minimalai-dataset-visualization.html#get_grid',
                                                                     'minimalai/datasets.py'),
                                    'minimalai.datasets.show_image': ( 'minimalai-dataset-visualization.html#show_image',
                                                                       'minimalai/datasets.py'),
                                    'minimalai.datasets.show_images': ( 'minimalai-dataset-visualization.html#show_images',
                                                                        'minimalai/datasets.py'),
                                    'minimalai.datasets.subplots': ( 'minimalai-dataset-visualization.html#subplots',
                                                                     'minimalai/datasets.py')},
            'minimalai.diffusion': { 'minimalai.diffusion.DownBlock': ('diffusion-attn-cond.html#downblock', 'minimalai/diffusion.py'),
                                     'minimalai.diffusion.DownBlock.__init__': ( 'diffusion-attn-cond.html#downblock.__init__',
                                                                                 'minimalai/diffusion.py'),
                                     'minimalai.diffusion.DownBlock.forward': ( 'diffusion-attn-cond.html#downblock.forward',
                                                                                'minimalai/diffusion.py'),
                                     'minimalai.diffusion.EmbResBlock': ('diffusion-attn-cond.html#embresblock', 'minimalai/diffusion.py'),
                                     'minimalai.diffusion.EmbResBlock.__init__': ( 'diffusion-attn-cond.html#embresblock.__init__',
                                                                                   'minimalai/diffusion.py'),
                                     'minimalai.diffusion.EmbResBlock.forward': ( 'diffusion-attn-cond.html#embresblock.forward',
                                                                                  'minimalai/diffusion.py'),
                                     'minimalai.diffusion.EmbUNetModel': ( 'diffusion-attn-cond.html#embunetmodel',
                                                                           'minimalai/diffusion.py'),
                                     'minimalai.diffusion.EmbUNetModel.__init__': ( 'diffusion-attn-cond.html#embunetmodel.__init__',
                                                                                    'minimalai/diffusion.py'),
                                     'minimalai.diffusion.EmbUNetModel.forward': ( 'diffusion-attn-cond.html#embunetmodel.forward',
                                                                                   'minimalai/diffusion.py'),
                                     'minimalai.diffusion.SelfAttention': ( 'diffusion-attn-cond.html#selfattention',
                                                                            'minimalai/diffusion.py'),
                                     'minimalai.diffusion.SelfAttention.__init__': ( 'diffusion-attn-cond.html#selfattention.__init__',
                                                                                     'minimalai/diffusion.py'),
                                     'minimalai.diffusion.SelfAttention.forward': ( 'diffusion-attn-cond.html#selfattention.forward',
                                                                                    'minimalai/diffusion.py'),
                                     'minimalai.diffusion.SelfAttention2D': ( 'diffusion-attn-cond.html#selfattention2d',
                                                                              'minimalai/diffusion.py'),
                                     'minimalai.diffusion.SelfAttention2D.forward': ( 'diffusion-attn-cond.html#selfattention2d.forward',
                                                                                      'minimalai/diffusion.py'),
                                     'minimalai.diffusion.UpBlock': ('diffusion-attn-cond.html#upblock', 'minimalai/diffusion.py'),
                                     'minimalai.diffusion.UpBlock.__init__': ( 'diffusion-attn-cond.html#upblock.__init__',
                                                                               'minimalai/diffusion.py'),
                                     'minimalai.diffusion.UpBlock.forward': ( 'diffusion-attn-cond.html#upblock.forward',
                                                                              'minimalai/diffusion.py'),
                                     'minimalai.diffusion.abar': ('diffusion-attn-cond.html#abar', 'minimalai/diffusion.py'),
                                     'minimalai.diffusion.collate_ddpm': ( 'diffusion-attn-cond.html#collate_ddpm',
                                                                           'minimalai/diffusion.py'),
                                     'minimalai.diffusion.cond_sample': ('diffusion-attn-cond.html#cond_sample', 'minimalai/diffusion.py'),
                                     'minimalai.diffusion.ddim_step': ('diffusion-attn-cond.html#ddim_step', 'minimalai/diffusion.py'),
                                     'minimalai.diffusion.dl_ddpm': ('diffusion-attn-cond.html#dl_ddpm', 'minimalai/diffusion.py'),
                                     'minimalai.diffusion.inv_abar': ('diffusion-attn-cond.html#inv_abar', 'minimalai/diffusion.py'),
                                     'minimalai.diffusion.lin': ('diffusion-attn-cond.html#lin', 'minimalai/diffusion.py'),
                                     'minimalai.diffusion.noisify': ('diffusion-attn-cond.html#noisify', 'minimalai/diffusion.py'),
                                     'minimalai.diffusion.pre_conv': ('diffusion-attn-cond.html#pre_conv', 'minimalai/diffusion.py'),
                                     'minimalai.diffusion.sample': ('diffusion-attn-cond.html#sample', 'minimalai/diffusion.py'),
                                     'minimalai.diffusion.saved': ('diffusion-attn-cond.html#saved', 'minimalai/diffusion.py'),
                                     'minimalai.diffusion.timestep_embedding': ( 'diffusion-attn-cond.html#timestep_embedding',
                                                                                 'minimalai/diffusion.py'),
                                     'minimalai.diffusion.upsample': ('diffusion-attn-cond.html#upsample', 'minimalai/diffusion.py')},
            'minimalai.diffusion2': { 'minimalai.diffusion2.DownBlock': ( 'diffusion-attn-nodownsave.html#downblock',
                                                                          'minimalai/diffusion2.py'),
                                      'minimalai.diffusion2.DownBlock.__init__': ( 'diffusion-attn-nodownsave.html#downblock.__init__',
                                                                                   'minimalai/diffusion2.py'),
                                      'minimalai.diffusion2.DownBlock.forward': ( 'diffusion-attn-nodownsave.html#downblock.forward',
                                                                                  'minimalai/diffusion2.py'),
                                      'minimalai.diffusion2.EmbResBlock': ( 'diffusion-attn-nodownsave.html#embresblock',
                                                                            'minimalai/diffusion2.py'),
                                      'minimalai.diffusion2.EmbResBlock.__init__': ( 'diffusion-attn-nodownsave.html#embresblock.__init__',
                                                                                     'minimalai/diffusion2.py'),
                                      'minimalai.diffusion2.EmbResBlock.forward': ( 'diffusion-attn-nodownsave.html#embresblock.forward',
                                                                                    'minimalai/diffusion2.py'),
                                      'minimalai.diffusion2.EmbUNetModel': ( 'diffusion-attn-nodownsave.html#embunetmodel',
                                                                             'minimalai/diffusion2.py'),
                                      'minimalai.diffusion2.EmbUNetModel.__init__': ( 'diffusion-attn-nodownsave.html#embunetmodel.__init__',
                                                                                      'minimalai/diffusion2.py'),
                                      'minimalai.diffusion2.EmbUNetModel.forward': ( 'diffusion-attn-nodownsave.html#embunetmodel.forward',
                                                                                     'minimalai/diffusion2.py'),
                                      'minimalai.diffusion2.UpBlock': ('diffusion-attn-nodownsave.html#upblock', 'minimalai/diffusion2.py'),
                                      'minimalai.diffusion2.UpBlock.__init__': ( 'diffusion-attn-nodownsave.html#upblock.__init__',
                                                                                 'minimalai/diffusion2.py'),
                                      'minimalai.diffusion2.UpBlock.forward': ( 'diffusion-attn-nodownsave.html#upblock.forward',
                                                                                'minimalai/diffusion2.py'),
                                      'minimalai.diffusion2.abar': ('diffusion-attn-nodownsave.html#abar', 'minimalai/diffusion2.py'),
                                      'minimalai.diffusion2.ddim_step': ( 'diffusion-attn-nodownsave.html#ddim_step',
                                                                          'minimalai/diffusion2.py'),
                                      'minimalai.diffusion2.inv_abar': ( 'diffusion-attn-nodownsave.html#inv_abar',
                                                                         'minimalai/diffusion2.py'),
                                      'minimalai.diffusion2.lin': ('diffusion-attn-nodownsave.html#lin', 'minimalai/diffusion2.py'),
                                      'minimalai.diffusion2.noisify': ('diffusion-attn-nodownsave.html#noisify', 'minimalai/diffusion2.py'),
                                      'minimalai.diffusion2.pre_conv': ( 'diffusion-attn-nodownsave.html#pre_conv',
                                                                         'minimalai/diffusion2.py'),
                                      'minimalai.diffusion2.sample': ('diffusion-attn-nodownsave.html#sample', 'minimalai/diffusion2.py'),
                                      'minimalai.diffusion2.saved': ('diffusion-attn-nodownsave.html#saved', 'minimalai/diffusion2.py'),
                                      'minimalai.diffusion2.timestep_embedding': ( 'diffusion-attn-nodownsave.html#timestep_embedding',
                                                                                   'minimalai/diffusion2.py'),
                                      'minimalai.diffusion2.upsample': ( 'diffusion-attn-nodownsave.html#upsample',
                                                                         'minimalai/diffusion2.py')},
            'minimalai.fid': { 'minimalai.fid.ImageEval': ('fid.html#imageeval', 'minimalai/fid.py'),
                               'minimalai.fid.ImageEval.__init__': ('fid.html#imageeval.__init__', 'minimalai/fid.py'),
                               'minimalai.fid.ImageEval.fid': ('fid.html#imageeval.fid', 'minimalai/fid.py'),
                               'minimalai.fid.ImageEval.get_feats': ('fid.html#imageeval.get_feats', 'minimalai/fid.py'),
                               'minimalai.fid.ImageEval.kid': ('fid.html#imageeval.kid', 'minimalai/fid.py'),
                               'minimalai.fid._calc_fid': ('fid.html#_calc_fid', 'minimalai/fid.py'),
                               'minimalai.fid._calc_kid': ('fid.html#_calc_kid', 'minimalai/fid.py'),
                               'minimalai.fid._calc_stats': ('fid.html#_calc_stats', 'minimalai/fid.py'),
                               'minimalai.fid._sqrtm_newton_schulz': ('fid.html#_sqrtm_newton_schulz', 'minimalai/fid.py'),
                               'minimalai.fid._squared_mmd': ('fid.html#_squared_mmd', 'minimalai/fid.py')},
            'minimalai.imports': {},
            'minimalai.init': { 'minimalai.init.BatchTransformCB': ('initializing.html#batchtransformcb', 'minimalai/init.py'),
                                'minimalai.init.BatchTransformCB.__init__': ( 'initializing.html#batchtransformcb.__init__',
                                                                              'minimalai/init.py'),
                                'minimalai.init.BatchTransformCB.before_batch': ( 'initializing.html#batchtransformcb.before_batch',
                                                                                  'minimalai/init.py'),
                                'minimalai.init.GeneralRelu': ('initializing.html#generalrelu', 'minimalai/init.py'),
                                'minimalai.init.GeneralRelu.__init__': ('initializing.html#generalrelu.__init__', 'minimalai/init.py'),
                                'minimalai.init.GeneralRelu.forward': ('initializing.html#generalrelu.forward', 'minimalai/init.py'),
                                'minimalai.init._lsuv_stats': ('initializing.html#_lsuv_stats', 'minimalai/init.py'),
                                'minimalai.init.clean_ipython_hist': ('initializing.html#clean_ipython_hist', 'minimalai/init.py'),
                                'minimalai.init.clean_mem': ('initializing.html#clean_mem', 'minimalai/init.py'),
                                'minimalai.init.clean_tb': ('initializing.html#clean_tb', 'minimalai/init.py'),
                                'minimalai.init.conv': ('initializing.html#conv', 'minimalai/init.py'),
                                'minimalai.init.get_model': ('initializing.html#get_model', 'minimalai/init.py'),
                                'minimalai.init.init_weights': ('initializing.html#init_weights', 'minimalai/init.py'),
                                'minimalai.init.lsuv_init': ('initializing.html#lsuv_init', 'minimalai/init.py'),
                                'minimalai.init.plot_func': ('initializing.html#plot_func', 'minimalai/init.py')},
            'minimalai.learner': { 'minimalai.learner.Callback': ('learner.html#callback', 'minimalai/learner.py'),
                                   'minimalai.learner.CancelBatchException': ('learner.html#cancelbatchexception', 'minimalai/learner.py'),
                                   'minimalai.learner.CancelEpochException': ('learner.html#cancelepochexception', 'minimalai/learner.py'),
                                   'minimalai.learner.CancelFitException': ('learner.html#cancelfitexception', 'minimalai/learner.py'),
                                   'minimalai.learner.DeviceCB': ('learner.html#devicecb', 'minimalai/learner.py'),
                                   'minimalai.learner.DeviceCB.__init__': ('learner.html#devicecb.__init__', 'minimalai/learner.py'),
                                   'minimalai.learner.DeviceCB.before_batch': ( 'learner.html#devicecb.before_batch',
                                                                                'minimalai/learner.py'),
                                   'minimalai.learner.DeviceCB.before_fit': ('learner.html#devicecb.before_fit', 'minimalai/learner.py'),
                                   'minimalai.learner.LRFinderCB': ('learner.html#lrfindercb', 'minimalai/learner.py'),
                                   'minimalai.learner.LRFinderCB.__init__': ('learner.html#lrfindercb.__init__', 'minimalai/learner.py'),
                                   'minimalai.learner.LRFinderCB.after_batch': ( 'learner.html#lrfindercb.after_batch',
                                                                                 'minimalai/learner.py'),
                                   'minimalai.learner.LRFinderCB.before_fit': ( 'learner.html#lrfindercb.before_fit',
                                                                                'minimalai/learner.py'),
                                   'minimalai.learner.LRFinderCB.cleanup_fit': ( 'learner.html#lrfindercb.cleanup_fit',
                                                                                 'minimalai/learner.py'),
                                   'minimalai.learner.Learner': ('learner.html#learner', 'minimalai/learner.py'),
                                   'minimalai.learner.Learner.__getattr__': ('learner.html#learner.__getattr__', 'minimalai/learner.py'),
                                   'minimalai.learner.Learner.__init__': ('learner.html#learner.__init__', 'minimalai/learner.py'),
                                   'minimalai.learner.Learner._fit': ('learner.html#learner._fit', 'minimalai/learner.py'),
                                   'minimalai.learner.Learner._one_batch': ('learner.html#learner._one_batch', 'minimalai/learner.py'),
                                   'minimalai.learner.Learner._one_epoch': ('learner.html#learner._one_epoch', 'minimalai/learner.py'),
                                   'minimalai.learner.Learner.callback': ('learner.html#learner.callback', 'minimalai/learner.py'),
                                   'minimalai.learner.Learner.fit': ('learner.html#learner.fit', 'minimalai/learner.py'),
                                   'minimalai.learner.Learner.one_epoch': ('learner.html#learner.one_epoch', 'minimalai/learner.py'),
                                   'minimalai.learner.Learner.training': ('learner.html#learner.training', 'minimalai/learner.py'),
                                   'minimalai.learner.MetricsCB': ('learner.html#metricscb', 'minimalai/learner.py'),
                                   'minimalai.learner.MetricsCB.__init__': ('learner.html#metricscb.__init__', 'minimalai/learner.py'),
                                   'minimalai.learner.MetricsCB._log': ('learner.html#metricscb._log', 'minimalai/learner.py'),
                                   'minimalai.learner.MetricsCB.after_batch': ( 'learner.html#metricscb.after_batch',
                                                                                'minimalai/learner.py'),
                                   'minimalai.learner.MetricsCB.after_epoch': ( 'learner.html#metricscb.after_epoch',
                                                                                'minimalai/learner.py'),
                                   'minimalai.learner.MetricsCB.before_epoch': ( 'learner.html#metricscb.before_epoch',
                                                                                 'minimalai/learner.py'),
                                   'minimalai.learner.MetricsCB.before_fit': ('learner.html#metricscb.before_fit', 'minimalai/learner.py'),
                                   'minimalai.learner.MomentumLearner': ('learner.html#momentumlearner', 'minimalai/learner.py'),
                                   'minimalai.learner.MomentumLearner.__init__': ( 'learner.html#momentumlearner.__init__',
                                                                                   'minimalai/learner.py'),
                                   'minimalai.learner.MomentumLearner.zero_grad': ( 'learner.html#momentumlearner.zero_grad',
                                                                                    'minimalai/learner.py'),
                                   'minimalai.learner.ProgressCB': ('learner.html#progresscb', 'minimalai/learner.py'),
                                   'minimalai.learner.ProgressCB.__init__': ('learner.html#progresscb.__init__', 'minimalai/learner.py'),
                                   'minimalai.learner.ProgressCB._log': ('learner.html#progresscb._log', 'minimalai/learner.py'),
                                   'minimalai.learner.ProgressCB.after_batch': ( 'learner.html#progresscb.after_batch',
                                                                                 'minimalai/learner.py'),
                                   'minimalai.learner.ProgressCB.after_epoch': ( 'learner.html#progresscb.after_epoch',
                                                                                 'minimalai/learner.py'),
                                   'minimalai.learner.ProgressCB.before_epoch': ( 'learner.html#progresscb.before_epoch',
                                                                                  'minimalai/learner.py'),
                                   'minimalai.learner.ProgressCB.before_fit': ( 'learner.html#progresscb.before_fit',
                                                                                'minimalai/learner.py'),
                                   'minimalai.learner.SingleBatchCB': ('learner.html#singlebatchcb', 'minimalai/learner.py'),
                                   'minimalai.learner.SingleBatchCB.after_batch': ( 'learner.html#singlebatchcb.after_batch',
                                                                                    'minimalai/learner.py'),
                                   'minimalai.learner.TrainCB': ('learner.html#traincb', 'minimalai/learner.py'),
                                   'minimalai.learner.TrainCB.__init__': ('learner.html#traincb.__init__', 'minimalai/learner.py'),
                                   'minimalai.learner.TrainCB.backward': ('learner.html#traincb.backward', 'minimalai/learner.py'),
                                   'minimalai.learner.TrainCB.get_loss': ('learner.html#traincb.get_loss', 'minimalai/learner.py'),
                                   'minimalai.learner.TrainCB.predict': ('learner.html#traincb.predict', 'minimalai/learner.py'),
                                   'minimalai.learner.TrainCB.step': ('learner.html#traincb.step', 'minimalai/learner.py'),
                                   'minimalai.learner.TrainCB.zero_grad': ('learner.html#traincb.zero_grad', 'minimalai/learner.py'),
                                   'minimalai.learner.TrainLearner': ('learner.html#trainlearner', 'minimalai/learner.py'),
                                   'minimalai.learner.TrainLearner.backward': ( 'learner.html#trainlearner.backward',
                                                                                'minimalai/learner.py'),
                                   'minimalai.learner.TrainLearner.get_loss': ( 'learner.html#trainlearner.get_loss',
                                                                                'minimalai/learner.py'),
                                   'minimalai.learner.TrainLearner.predict': ('learner.html#trainlearner.predict', 'minimalai/learner.py'),
                                   'minimalai.learner.TrainLearner.step': ('learner.html#trainlearner.step', 'minimalai/learner.py'),
                                   'minimalai.learner.TrainLearner.zero_grad': ( 'learner.html#trainlearner.zero_grad',
                                                                                 'minimalai/learner.py'),
                                   'minimalai.learner.lr_find': ('learner.html#lr_find', 'minimalai/learner.py'),
                                   'minimalai.learner.run_cbs': ('learner.html#run_cbs', 'minimalai/learner.py'),
                                   'minimalai.learner.to_cpu': ('learner.html#to_cpu', 'minimalai/learner.py'),
                                   'minimalai.learner.with_cbs': ('learner.html#with_cbs', 'minimalai/learner.py'),
                                   'minimalai.learner.with_cbs.__call__': ('learner.html#with_cbs.__call__', 'minimalai/learner.py'),
                                   'minimalai.learner.with_cbs.__init__': ('learner.html#with_cbs.__init__', 'minimalai/learner.py')},
            'minimalai.resnet': { 'minimalai.resnet.ResBlock': ('resnet.html#resblock', 'minimalai/resnet.py'),
                                  'minimalai.resnet.ResBlock.__init__': ('resnet.html#resblock.__init__', 'minimalai/resnet.py'),
                                  'minimalai.resnet.ResBlock.forward': ('resnet.html#resblock.forward', 'minimalai/resnet.py'),
                                  'minimalai.resnet._conv_block': ('resnet.html#_conv_block', 'minimalai/resnet.py')},
            'minimalai.sgd': { 'minimalai.sgd.BaseSchedCB': ('accel_sgd.html#baseschedcb', 'minimalai/sgd.py'),
                               'minimalai.sgd.BaseSchedCB.__init__': ('accel_sgd.html#baseschedcb.__init__', 'minimalai/sgd.py'),
                               'minimalai.sgd.BaseSchedCB._step': ('accel_sgd.html#baseschedcb._step', 'minimalai/sgd.py'),
                               'minimalai.sgd.BaseSchedCB.before_fit': ('accel_sgd.html#baseschedcb.before_fit', 'minimalai/sgd.py'),
                               'minimalai.sgd.BatchSchedCB': ('accel_sgd.html#batchschedcb', 'minimalai/sgd.py'),
                               'minimalai.sgd.BatchSchedCB.after_batch': ('accel_sgd.html#batchschedcb.after_batch', 'minimalai/sgd.py'),
                               'minimalai.sgd.EpochSchedCB': ('accel_sgd.html#epochschedcb', 'minimalai/sgd.py'),
                               'minimalai.sgd.EpochSchedCB.after_epoch': ('accel_sgd.html#epochschedcb.after_epoch', 'minimalai/sgd.py'),
                               'minimalai.sgd.HasLearnCB': ('accel_sgd.html#haslearncb', 'minimalai/sgd.py'),
                               'minimalai.sgd.HasLearnCB.after_fit': ('accel_sgd.html#haslearncb.after_fit', 'minimalai/sgd.py'),
                               'minimalai.sgd.HasLearnCB.before_fit': ('accel_sgd.html#haslearncb.before_fit', 'minimalai/sgd.py'),
                               'minimalai.sgd.RecorderCB': ('accel_sgd.html#recordercb', 'minimalai/sgd.py'),
                               'minimalai.sgd.RecorderCB.__init__': ('accel_sgd.html#recordercb.__init__', 'minimalai/sgd.py'),
                               'minimalai.sgd.RecorderCB.after_batch': ('accel_sgd.html#recordercb.after_batch', 'minimalai/sgd.py'),
                               'minimalai.sgd.RecorderCB.before_fit': ('accel_sgd.html#recordercb.before_fit', 'minimalai/sgd.py'),
                               'minimalai.sgd.RecorderCB.plot': ('accel_sgd.html#recordercb.plot', 'minimalai/sgd.py')},
            'minimalai.stability': {},
            'minimalai.training': { 'minimalai.training.Dataset': ('minibatch_training.html#dataset', 'minimalai/training.py'),
                                    'minimalai.training.Dataset.__getitem__': ( 'minibatch_training.html#dataset.__getitem__',
                                                                                'minimalai/training.py'),
                                    'minimalai.training.Dataset.__init__': ( 'minibatch_training.html#dataset.__init__',
                                                                             'minimalai/training.py'),
                                    'minimalai.training.Dataset.__len__': ( 'minibatch_training.html#dataset.__len__',
                                                                            'minimalai/training.py'),
                                    'minimalai.training.accuracy': ('minibatch_training.html#accuracy', 'minimalai/training.py'),
                                    'minimalai.training.fit': ('minibatch_training.html#fit', 'minimalai/training.py'),
                                    'minimalai.training.get_dataloaders': ( 'minibatch_training.html#get_dataloaders',
                                                                            'minimalai/training.py'),
                                    'minimalai.training.report_metrics': ( 'minibatch_training.html#report_metrics',
                                                                           'minimalai/training.py')}}}
